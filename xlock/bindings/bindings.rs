/* automatically generated by rust-bindgen 0.69.4 */

pub type XID = ::std::os::raw::c_ulong;
pub type VisualID = ::std::os::raw::c_ulong;
pub type Window = XID;
pub type Pixmap = XID;
pub type Colormap = XID;
pub type XPointer = *mut ::std::os::raw::c_char;
#[repr(C)]
#[derive(Debug)]
pub struct _XExtData {
  pub number: ::std::os::raw::c_int,
  pub next: *mut _XExtData,
  pub free_private:
    ::std::option::Option<unsafe extern "C" fn(extension: *mut _XExtData) -> ::std::os::raw::c_int>,
  pub private_data: XPointer,
}
pub type XExtData = _XExtData;
#[repr(C)]
#[derive(Debug)]
pub struct _XGC {
  _unused: [u8; 0],
}
pub type GC = *mut _XGC;
#[repr(C)]
#[derive(Debug)]
pub struct Visual {
  pub ext_data: *mut XExtData,
  pub visualid: VisualID,
  pub class: ::std::os::raw::c_int,
  pub red_mask: ::std::os::raw::c_ulong,
  pub green_mask: ::std::os::raw::c_ulong,
  pub blue_mask: ::std::os::raw::c_ulong,
  pub bits_per_rgb: ::std::os::raw::c_int,
  pub map_entries: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug)]
pub struct Depth {
  pub depth: ::std::os::raw::c_int,
  pub nvisuals: ::std::os::raw::c_int,
  pub visuals: *mut Visual,
}
#[repr(C)]
#[derive(Debug)]
pub struct _XDisplay {
  _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug)]
pub struct Screen {
  pub ext_data: *mut XExtData,
  pub display: *mut _XDisplay,
  pub root: Window,
  pub width: ::std::os::raw::c_int,
  pub height: ::std::os::raw::c_int,
  pub mwidth: ::std::os::raw::c_int,
  pub mheight: ::std::os::raw::c_int,
  pub ndepths: ::std::os::raw::c_int,
  pub depths: *mut Depth,
  pub root_depth: ::std::os::raw::c_int,
  pub root_visual: *mut Visual,
  pub default_gc: GC,
  pub cmap: Colormap,
  pub white_pixel: ::std::os::raw::c_ulong,
  pub black_pixel: ::std::os::raw::c_ulong,
  pub max_maps: ::std::os::raw::c_int,
  pub min_maps: ::std::os::raw::c_int,
  pub backing_store: ::std::os::raw::c_int,
  pub save_unders: ::std::os::raw::c_int,
  pub root_input_mask: ::std::os::raw::c_long,
}
#[repr(C)]
#[derive(Debug)]
pub struct XWindowChanges {
  pub x: ::std::os::raw::c_int,
  pub y: ::std::os::raw::c_int,
  pub width: ::std::os::raw::c_int,
  pub height: ::std::os::raw::c_int,
  pub border_width: ::std::os::raw::c_int,
  pub sibling: Window,
  pub stack_mode: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug)]
pub struct XPoint {
  pub x: ::std::os::raw::c_short,
  pub y: ::std::os::raw::c_short,
}
pub type Display = _XDisplay;
pub const XrmOptionKind_XrmoptionNoArg: XrmOptionKind = 0;
pub const XrmOptionKind_XrmoptionIsArg: XrmOptionKind = 1;
pub const XrmOptionKind_XrmoptionStickyArg: XrmOptionKind = 2;
pub const XrmOptionKind_XrmoptionSepArg: XrmOptionKind = 3;
pub const XrmOptionKind_XrmoptionResArg: XrmOptionKind = 4;
pub const XrmOptionKind_XrmoptionSkipArg: XrmOptionKind = 5;
pub const XrmOptionKind_XrmoptionSkipLine: XrmOptionKind = 6;
pub const XrmOptionKind_XrmoptionSkipNArgs: XrmOptionKind = 7;
pub type XrmOptionKind = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug)]
pub struct XrmOptionDescRec {
  pub option: *mut ::std::os::raw::c_char,
  pub specifier: *mut ::std::os::raw::c_char,
  pub argKind: XrmOptionKind,
  pub value: XPointer,
}
#[repr(C)]
#[derive(Debug)]
pub struct argtype {
  pub var: *mut ::std::os::raw::c_void,
  pub name: *mut ::std::os::raw::c_char,
  pub classname: *mut ::std::os::raw::c_char,
  pub def: *mut ::std::os::raw::c_char,
  pub type_: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug)]
pub struct OptionStruct {
  pub opt: *mut ::std::os::raw::c_char,
  pub desc: *mut ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug)]
pub struct ModeSpecOpt {
  pub numopts: ::std::os::raw::c_int,
  pub opts: *mut XrmOptionDescRec,
  pub numvarsdesc: ::std::os::raw::c_int,
  pub vars: *mut argtype,
  pub desc: *mut OptionStruct,
}
#[repr(C)]
#[derive(Debug)]
pub struct ModStruct {
  pub cmdline_arg: *const ::std::os::raw::c_char,
  pub init_name: *const ::std::os::raw::c_char,
  pub callback_name: *const ::std::os::raw::c_char,
  pub release_name: *const ::std::os::raw::c_char,
  pub refresh_name: *const ::std::os::raw::c_char,
  pub change_name: *const ::std::os::raw::c_char,
  pub unused_name: *const ::std::os::raw::c_char,
  pub msopt: *mut ModeSpecOpt,
  pub def_delay: ::std::os::raw::c_int,
  pub def_count: ::std::os::raw::c_int,
  pub def_cycles: ::std::os::raw::c_int,
  pub def_size: ::std::os::raw::c_int,
  pub def_ncolors: ::std::os::raw::c_int,
  pub def_saturation: f32,
  pub def_bitmap: *const ::std::os::raw::c_char,
  pub desc: *const ::std::os::raw::c_char,
  pub flags: ::std::os::raw::c_uint,
  pub userdata: *mut ::std::os::raw::c_void,
}
pub type ModeHook = ::std::option::Option<unsafe extern "C" fn(arg1: *mut ModeInfo_s)>;
#[repr(C)]
#[derive(Debug)]
pub struct LockStruct_s {
  pub cmdline_arg: *mut ::std::os::raw::c_char,
  pub init_hook: ModeHook,
  pub callback_hook: ModeHook,
  pub release_hook: ModeHook,
  pub refresh_hook: ModeHook,
  pub change_hook: ModeHook,
  pub free_hook: ModeHook,
  pub msopt: *mut ModeSpecOpt,
  pub def_delay: ::std::os::raw::c_int,
  pub def_count: ::std::os::raw::c_int,
  pub def_cycles: ::std::os::raw::c_int,
  pub def_size: ::std::os::raw::c_int,
  pub def_ncolors: ::std::os::raw::c_int,
  pub def_saturation: f32,
  pub def_bitmap: *mut ::std::os::raw::c_char,
  pub desc: *mut ::std::os::raw::c_char,
  pub flags: ::std::os::raw::c_uint,
  pub userdata: *mut ::std::os::raw::c_void,
  pub state_array: *mut *mut ::std::os::raw::c_void,
}
pub type LockStruct = LockStruct_s;
#[repr(C)]
#[derive(Debug)]
pub struct mailboxInfo {
  pub pixmap: Pixmap,
  pub width: ::std::os::raw::c_int,
  pub height: ::std::os::raw::c_int,
  pub graphics_format: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug)]
pub struct mboxInfo {
  pub mail: mailboxInfo,
  pub nomail: mailboxInfo,
  pub mbgc: GC,
}
#[repr(C)]
#[derive(Debug)]
pub struct ScreenInfo {
  pub visual: *mut Visual,
  pub visualclass: ::std::os::raw::c_int,
  pub depth: ::std::os::raw::c_uint,
  pub red_mask: ::std::os::raw::c_ulong,
  pub green_mask: ::std::os::raw::c_ulong,
  pub blue_mask: ::std::os::raw::c_ulong,
  pub colormap_size: ::std::os::raw::c_int,
  pub colormap: Colormap,
  pub window: Window,
  pub icon: Window,
  pub root: Window,
  pub gc: GC,
  pub textgc: GC,
  pub plantextgc: GC,
  pub iconpos: XPoint,
  pub planpos: XPoint,
  pub npixels: ::std::os::raw::c_int,
  pub polygon_count: ::std::os::raw::c_int,
  pub pixels: *mut ::std::os::raw::c_ulong,
  pub black_pixel: ::std::os::raw::c_ulong,
  pub white_pixel: ::std::os::raw::c_ulong,
  pub bg_pixel: ::std::os::raw::c_ulong,
  pub fg_pixel: ::std::os::raw::c_ulong,
  pub right_pixel: ::std::os::raw::c_ulong,
  pub left_pixel: ::std::os::raw::c_ulong,
  pub none_pixel: ::std::os::raw::c_ulong,
  pub both_pixel: ::std::os::raw::c_ulong,
  pub fullsizeconfigure: XWindowChanges,
  pub mb: mboxInfo,
  pub root_pixmap: Pixmap,
  pub recursion_depth: f64,
}
#[repr(C)]
#[derive(Debug)]
pub struct WindowInfo {
  pub display: *mut Display,
  pub screenptr: *mut Screen,
  pub screen: ::std::os::raw::c_int,
  pub real_screen: ::std::os::raw::c_int,
  pub num_screens: ::std::os::raw::c_int,
  pub max_screens: ::std::os::raw::c_int,
  pub window: Window,
  pub width: ::std::os::raw::c_int,
  pub height: ::std::os::raw::c_int,
  pub flags: ::std::os::raw::c_uint,
  pub delta3d: f32,
  pub is_drawn: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug)]
pub struct RunInfo {
  pub pause: ::std::os::raw::c_long,
  pub delay: ::std::os::raw::c_long,
  pub count: ::std::os::raw::c_int,
  pub cycles: ::std::os::raw::c_int,
  pub size: ::std::os::raw::c_int,
  pub ncolors: ::std::os::raw::c_int,
  pub saturation: f32,
  pub bitmap: *mut ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug)]
pub struct ModeInfo_s {
  pub windowinfo: WindowInfo,
  pub screeninfo: *mut ScreenInfo,
  pub runinfo: RunInfo,
  pub lockstruct: *mut LockStruct_s,
}
pub type ModeInfo = ModeInfo_s;
